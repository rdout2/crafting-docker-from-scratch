#!/usr/bin/env python3
"""
Commande run pour mini-docker
G√®re l'ex√©cution des conteneurs avec isolation des namespaces et cgroups
"""

import os
import sys
import signal
import time
from container.process import ContainerProcess
from cgroups.manager import CgroupManager


def parse_memory_limit(memory_str):
    """Parse une cha√Æne de limite de m√©moire (ex: '100M', '1G') en bytes"""
    if not memory_str:
        return None
    
    memory_str = memory_str.upper()
    if memory_str.endswith('K'):
        return int(memory_str[:-1]) * 1024
    elif memory_str.endswith('M'):
        return int(memory_str[:-1]) * 1024 * 1024
    elif memory_str.endswith('G'):
        return int(memory_str[:-1]) * 1024 * 1024 * 1024
    else:
        # Assume bytes
        return int(memory_str)


def setup_signal_handlers(container_process):
    """Configure les gestionnaires de signaux pour la propret√©"""
    def signal_handler(signum, frame):
        print(f"\nRe√ßu le signal {signum}, arr√™t du conteneur...")
        container_process.cleanup()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)


def run_command(args):
    """Ex√©cute la commande run avec les param√®tres donn√©s"""
    print(f"üöÄ D√©marrage du conteneur avec la commande: {args.image}")
    
    # Validation des param√®tres
    if not os.path.exists(args.rootfs):
        print(f"‚ùå Erreur: Le rootfs '{args.rootfs}' n'existe pas")
        sys.exit(1)
    
    # Parse des limites de ressources
    memory_limit = parse_memory_limit(args.memory)
    
    try:
        # Cr√©ation du gestionnaire de cgroups
        cgroup_manager = None
        if memory_limit or args.cpus:
            cgroup_manager = CgroupManager()
            container_id = f"mini-docker-{int(time.time())}"
            cgroup_manager.create_cgroup(container_id)
            
            if memory_limit:
                print(f"üìä Limite de m√©moire: {args.memory}")
                cgroup_manager.set_memory_limit(container_id, memory_limit)
            
            if args.cpus:
                print(f"‚ö° Limite de CPU: {args.cpus} c≈ìurs")
                cgroup_manager.set_cpu_limit(container_id, args.cpus)
        
        # Cr√©ation et configuration du processus conteneur
        container = ContainerProcess(
            rootfs=args.rootfs,
            hostname=args.hostname,
            cgroup_manager=cgroup_manager,
            container_id=container_id if cgroup_manager else None
        )
        
        # Configuration des gestionnaires de signaux
        setup_signal_handlers(container)
        
        # Ex√©cution du conteneur
        print("üîí Cr√©ation des namespaces et isolation...")
        container.run(args.image, args.args)
        
    except PermissionError:
        print("‚ùå Erreur: Permissions insuffisantes. Ex√©cutez avec sudo.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution du conteneur: {e}")
        if cgroup_manager and 'container_id' in locals():
            cgroup_manager.cleanup(container_id)
        sys.exit(1)
